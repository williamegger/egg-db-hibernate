package ${daoPackage};

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import ${LogPackage}.${Log};
import ${LogPackage}.${LogFactory};

import ${DBHelperPackage}.DBHelper;
import ${QueryPackage}.Query;
import ${idaoPackage}.I${Entity}Dao;
import ${entityPackage}.${Entity};
import ${ePackage}.DaoException;

public class ${Entity}Dao implements I${Entity}Dao {

	private static final ${Log} LOG = ${LogFactory}.${getLog}(${Entity}Dao.class);

	private static ${Entity}Dao instance = null;

	public static synchronized ${Entity}Dao getInstance() {
		if (instance == null) {
			instance = new ${Entity}Dao();
		}
		return instance;
	}

	@Override
	public ${idType} save(${Entity} ${entity}) throws DaoException {
		try {
			if (${entity} == null) {
				return null;
			}
#if(${hasDel})
			${entity}.setDeleted(false);
#end
#if(${hasCreateDate})
			${entity}.setCreateDate(System.currentTimeMillis());
#end
			${idType} ${id} = (${idType}) DBHelper.save(${entity});
			${entity}.set${Id}(${id});
			
			return ${id};
		} catch (Exception e) {
			String errorMsg = ${Entity}Dao.class + ".save():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new DaoException(errorMsg, e);
		}
	}

	@Override
	public void update(${Entity} ${entity}) throws DaoException {
		try {
			if (${entity} == null) {
				return;
			}
#if(${hasLastDate})
			${entity}.setLastDate(System.currentTimeMillis());
#end
			DBHelper.update(${entity});
		} catch (Exception e) {
			String errorMsg = ${Entity}Dao.class + ".update():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new DaoException(errorMsg, e);
		}
	}

	@Override
	public void del(${Entity} ${entity}) throws DaoException {
		try {
			if (${entity} == null) {
				return;
			}

#if(${hasDel})
			${entity}.setDeleted(true);
#if(${hasLastDate})
			${entity}.setLastDate(System.currentTimeMillis());
#end
			DBHelper.update(${entity});
#else
			DBHelper.delete(${entity});
#end
		} catch (Exception e) {
			String errorMsg = ${Entity}Dao.class + ".del():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new DaoException(errorMsg, e);
		}
	}

	@Override
	public ${Entity} get(${idType} ${id}) throws DaoException {
		try {
#if(${idType}=="String")
			if (${id} == null || ${id}.trim().isEmpty()) {
#else
			if (${id} == null || ${id} <= 0) {
#end
				return null;
			}

			return Query.table("${Entity} as s1")
					.select("s1")
#if(${hasDel})
					.eq("s1.deleted", false)
#end
					.eq("s1.${id}", ${id})
					.hql().one();
		} catch (Exception e) {
			String errorMsg = ${Entity}Dao.class + ".get():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new DaoException(errorMsg, e);
		}
	}

	@Override
	public boolean exist(${idType} ${id}) throws DaoException {
		try {
#if(${idType}=="String")
			if (${id} == null || ${id}.trim().isEmpty()) {
#else
			if (${id} == null || ${id} <= 0) {
#end
				return false;
			}

			return Query.table("${Entity} as s1")
#if(${hasDel})
					.eq("s1.deleted", false)
#end
					.eq("s1.${id}", ${id})
					.hql().exist();
		} catch (Exception e) {
			String errorMsg = ${Entity}Dao.class + ".exist():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new DaoException(errorMsg, e);
		}
	}

	@Override
	public void updateById(${idType} ${id}, String[] sets, String[] wheres, Object[] params) throws DaoException {
		try {
#if(${idType}=="String")
			if (${id} == null || ${id}.trim().isEmpty()) {
#else
			if (${id} == null || ${id} <= 0) {
#end
				return;
			}
			if (sets == null || sets.length == 0) {
				return;
			}

			List<String> whereList = null;
			if (wheres == null) {
				wheres = new String[] {};
				whereList = new ArrayList<String>();
			} else {
				whereList = new ArrayList<String>(Arrays.asList(wheres));
			}
			whereList.add("${id} = ?");
			wheres = whereList.toArray(wheres);

			List<Object> paramList = null;
			if (params == null) {
				params = new Object[] {};
				paramList = new ArrayList<Object>();
			} else {
				paramList = new ArrayList<Object>(Arrays.asList(params));
			}
			paramList.add(${id});
			params = paramList.toArray(params);

			DBHelper.hql.update("${Entity}", sets, wheres, params);
		} catch (Exception e) {
			String errorMsg = ${Entity}Dao.class + ".updateById():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new DaoException(errorMsg, e);
		}
	}
	
	@Override
	public void del(String[] wheres, Object[] params) throws DaoException {
		try {
#if(${hasDel})
			DBHelper.hql.update("${Entity}", new String[] {"deleted = 1"}, wheres, params);
#else
			DBHelper.hql.delete("${Entity}", wheres, params);
#end
		} catch (Exception e) {
			String errorMsg = ${Entity}Dao.class + ".del():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new DaoException(errorMsg, e);
		}
	}

	@Override
	public boolean exist(String[] wheres, Object[] params) throws DaoException {
		try {
			if (wheres == null || wheres.length == 0) {
				return false;
			}

			Query query = Query.table("${Entity}");
			for (String where : wheres) {
				query.and(where);
			}
			String hql = query.getCount();

			return DBHelper.hql.exist(hql, params);
		} catch (Exception e) {
			String errorMsg = ${Entity}Dao.class + ".exist():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new DaoException(errorMsg, e);
		}
	}

}
