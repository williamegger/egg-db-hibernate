package ${serPackage};

import java.util.List;

import ${LogPackage}.${Log};
import ${LogPackage}.${LogFactory};

import ${PageInfoPackage}.PageInfo;

import ${idaoPackage}.I${Entity}Dao;
import ${daoPackage}.${Entity}Dao;
import ${entityPackage}.${Entity};
import ${ePackage}.ServiceException;
import ${iserPackage}.I${Entity}Service;

import ${rootPackage}.view.bean.searchBean.${Entity}SearchBean;

public class ${Entity}Service implements I${Entity}Service {

	private static final ${Log} LOG = ${LogFactory}.${getLog}(${Entity}Dao.class);

	private static ${Entity}Service instance = null;

	public static synchronized ${Entity}Service getInstance() {
		if (instance == null) {
			instance = new ${Entity}Service();
		}
		return instance;
	}

	private I${Entity}Dao getI${Entity}() {
		return ${Entity}Dao.getInstance();
	}

	@Override
	public ${idType} save(${Entity} ${entity}) throws ServiceException {
		try {
			return getI${Entity}().save(${entity});
		} catch (Exception e) {
			String errorMsg = ${Entity}Service.class + ".save():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new ServiceException(errorMsg, e);
		}
	}

	@Override
	public void update(${Entity} ${entity}) throws ServiceException {
		try {
			getI${Entity}().update(${entity});
		} catch (Exception e) {
			String errorMsg = ${Entity}Service.class + ".update():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new ServiceException(errorMsg, e);
		}
	}

	@Override
	public void del(${Entity} ${entity}) throws ServiceException {
		try {
			getI${Entity}().del(${entity});
		} catch (Exception e) {
			String errorMsg = ${Entity}Service.class + ".del():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new ServiceException(errorMsg, e);
		}
	}

	@Override
	public ${Entity} get(${idType} ${id}) throws ServiceException {
		try {
			return getI${Entity}().get(${id});
		} catch (Exception e) {
			String errorMsg = ${Entity}Service.class + ".get():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new ServiceException(errorMsg, e);
		}
	}

	@Override
	public boolean exist(${idType} ${id}) throws ServiceException {
		try {
			return getI${Entity}().exist(${id});
		} catch (Exception e) {
			String errorMsg = ${Entity}Service.class + ".exist():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new ServiceException(errorMsg, e);
		}
	}

	@Override
	public ${Entity} get(String key, Object value) throws ServiceException {
		try {
			return getI${Entity}().get(key, value);
		} catch (Exception e) {
			String errorMsg = ${Entity}Service.class + ".get():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new ServiceException(errorMsg, e);
		}
	}

	@Override
	public boolean exist(String key, Object value) throws ServiceException {
		try {
			return getI${Entity}().exist(key, value);
		} catch (Exception e) {
			String errorMsg = ${Entity}Service.class + ".exist():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new ServiceException(errorMsg, e);
		}
	}

	@Override
	public List<${Entity}> findBySearch(int max, ${Entity}SearchBean search) throws ServiceException {
		try {
			return getI${Entity}().findBySearch(max, search);
		} catch (Exception e) {
			String errorMsg = ${Entity}Service.class + ".findBySearch():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new ServiceException(errorMsg, e);
		}
	}

	@Override
	public PageInfo findPageBySearch(int page, int rows, ${Entity}SearchBean search) throws ServiceException {
		try {
			return getI${Entity}().findPageBySearch(page, rows, search);
		} catch (Exception e) {
			String errorMsg = ${Entity}Service.class + ".findPageBySearch():" + e.getMessage();
			LOG.error(errorMsg, e);
			throw new ServiceException(errorMsg, e);
		}
	}

}
